# Copyright 2024 Canonical Ltd.
# See LICENSE file for licensing details.

[tool.poetry]
package-mode = false

[tool.poetry.dependencies]
python = "^3.10"
ops = "^2.17.0"
tenacity = "*"

[tool.poetry.group.charm-libs.dependencies]
# data_platform_libs/v0/data_interfaces.py
ops = ">=2.0.0"
# data_platform_libs/v0/upgrade.py
poetry-core = "*"
# data_platform_libs/v0/upgrade.py requires pydantic ^1.10
# grafana_agent/v0/cos_agent.py requires pydantic <2
pydantic = "^1.10, <2"
# tls_certificates_interface/v1/tls_certificates.py
cryptography = ">=42.0.5"
jsonschema = "*"

[tool.poetry.group.format]
optional = true

[tool.poetry.group.format.dependencies]
ruff = "*"

[tool.poetry.group.lint]
optional = true

[tool.poetry.group.lint.dependencies]
ruff = "*"
codespell = "*"
shellcheck-py = "*"

[tool.poetry.group.unit.dependencies]
pytest = "*"
pytest-asyncio = "*"
pytest-mock = "*"
coverage = {extras = ["toml"], version = "*"}
parameterized = "*"
ops-scenario = "*"
ops = "^2.17.0"

[tool.poetry.group.integration.dependencies]
ops = "^2.17.0"
pytest = "*"
pytest-github-secrets = {git = "https://github.com/canonical/data-platform-workflows", tag = "v22.0.0", subdirectory = "python/pytest_plugins/github_secrets"}
pytest-asyncio = "*"
pytest-operator = "^0.28.0"
pytest-operator-cache = {git = "https://github.com/canonical/data-platform-workflows", tag = "v22.0.0", subdirectory = "python/pytest_plugins/pytest_operator_cache"}
pytest-operator-groups = {git = "https://github.com/canonical/data-platform-workflows", tag = "v22.0.0", subdirectory = "python/pytest_plugins/pytest_operator_groups"}
juju = "3.5.2"
allure-pytest = "*"
allure-pytest-collection-report = {git = "https://github.com/canonical/data-platform-workflows", tag = "v22.0.0", subdirectory = "python/pytest_plugins/allure_pytest_collection_report"}
# pin websockets to <14.0 because of breaking changes in this version
# see also: https://github.com/juju/python-libjuju/issues/1184
websockets = "<14.0"
tenacity = "*"

[tool.coverage.run]
branch = true

[tool.coverage.report]
show_missing = true

[tool.pytest.ini_options]
minversion = "6.0"
log_cli_level = "INFO"
asyncio_mode = "auto"
asyncio_default_fixture_loop_scope = "function"

# Linting tools configuration
[tool.ruff]
line-length = 99
lint.select = ["E", "W", "F", "C", "N", "D", "I001"]
lint.extend-ignore = [
    "D203",
    "D204",
    "D213",
    "D215",
    "D400",
    "D404",
    "D406",
    "D407",
    "D408",
    "D409",
    "D413",
]
lint.ignore = ["E501", "D107"]
extend-exclude = ["__pycache__", "*.egg_info"]
lint.per-file-ignores = {"tests/*" = ["D100","D101","D102","D103","D104"]}

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.codespell]
skip = "build,lib,venv,icon.svg,.tox,.git,.mypy_cache,.ruff_cache,.coverage"

[tool.pyright]
include = ["src/**.py"]
